<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Traefik on 阳明的博客</title>
    <link>https://www.qikqiak.com/tags/traefik/</link>
    <description>Recent content in Traefik on 阳明的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 18 Sep 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.qikqiak.com/tags/traefik/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Traefik 2.0 正式版发布</title>
      <link>https://www.qikqiak.com/post/traefik2-ga/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/traefik2-ga/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.qikqiak.com/post/traefik2-ga/&#34;&gt;&lt;img src=&#34;https://bxdc-static.oss-cn-beijing.aliyuncs.com/images/traefik2.png&#34; alt=&#34;traefik 2.0&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;寄予厚望的 &lt;a href=&#34;https://traefik.io/&#34;&gt;Traefik 2.0&lt;/a&gt; 经过了一年的等待，今天终于正式发布了，此次大版本的更新添加了许多新功能，特别是大家都期望的支持 TCP 的功能。接下来我们就来探索下 Traefik 2.0 中有哪些新增的功能呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Traefik 团队开源的轻量级 Service Mesh 工具 Maesh</title>
      <link>https://www.qikqiak.com/post/maesh-service-mesh-by-trafik/</link>
      <pubDate>Thu, 05 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/maesh-service-mesh-by-trafik/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.qikqiak.com/post/maesh-service-mesh-by-trafik/&#34;&gt;&lt;img src=&#34;https://bxdc-static.oss-cn-beijing.aliyuncs.com/images/maesh.jpg&#34; alt=&#34;Maesh&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Containous（Traefik 团队）推出了全新设计的轻量级 service mesh（服务网格）工具：&lt;a href=&#34;http://mae.sh/&#34;&gt;Maesh&lt;/a&gt;，Maesh 允许对 Kubernetes 集群内流动的流量进行管理，这与入流量和出流量同样很重要。&lt;/p&gt;

&lt;p&gt;Maesh 构建在 Traefk 之上，是一个简单但功能齐全的服务网格，支持最新的服务网格接口规范 &lt;a href=&#34;https://smi-spec.io/&#34;&gt;SMI&lt;/a&gt;，有助于与现有的一些解决方案进行集成。此外，Maesh 默认是需要开启使用的，这意味着在你决定将它们添加到网格之前，你的现有服务不会受到影响。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nginx-ingress 的安装使用</title>
      <link>https://www.qikqiak.com/post/install-nginx-ingress/</link>
      <pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/install-nginx-ingress/</guid>
      <description>&lt;p&gt;nginx-ingress 和 traefik 都是比如热门的 ingress-controller，作为反向代理将外部流量导入集群内部，将 Kubernetes 内部的 Service 暴露给外部，在 Ingress 对象中通过域名匹配 Service，这样就可以直接通过域名访问到集群内部的服务了。相对于 traefik 来说，nginx-ingress 性能更加优秀，但是配置比 traefik 要稍微复杂一点，当然功能也要强大一些，支持的功能多许多，前面我们为大家介绍了 traefik 的使用，今天为大家介绍下 nginx-ingress 在 Kubernetes 中的安装使用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何保护对外暴露的 Kubernetes 服务</title>
      <link>https://www.qikqiak.com/post/how-to-protect-exposed-k8s-server/</link>
      <pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/how-to-protect-exposed-k8s-server/</guid>
      <description>&lt;p&gt;有时候我们需要在 Kubernetes 中暴露一些没有任何安全验证机制的服务，比如没有安装 xpack 的 Kibana，没有开启登录认证的 Jenkins 服务之类的，我们也想通过域名来进行访问，比较域名比较方便，更主要的是对于 Kubernetes 里面的服务，通过 Ingress 暴露一个服务太方便了，而且还可以通过 cert-manager 来自动的完成&lt;code&gt;HTTPS&lt;/code&gt;化。所以就非常有必要对这些服务进行一些安全验证了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes Ingress 自动化 HTTPS</title>
      <link>https://www.qikqiak.com/post/automatic-kubernetes-ingress-https-with-lets-encrypt/</link>
      <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/automatic-kubernetes-ingress-https-with-lets-encrypt/</guid>
      <description>&lt;p&gt;我们知道&lt;code&gt;HTTPS&lt;/code&gt;的服务非常安全，Google 现在对非&lt;code&gt;HTTPS&lt;/code&gt;的服务默认是拒绝的，而且还能避免国内各种乱七八糟的劫持，所以启用&lt;code&gt;HTTPS&lt;/code&gt;服务是真的非常有必要的。一些正规机构颁发的&lt;code&gt;CA&lt;/code&gt;证书费用又特别高，不过比较幸运的是也有免费的午餐 - &lt;code&gt;Let&#39;s Encrypt&lt;/code&gt;，虽然只有90天的证书有效期，但是我们完全可以在证书失效之前，重新生成证书替换掉。在&lt;code&gt;Kubernetes&lt;/code&gt;集群中就更方便了，我们可以通过 Kubernetes Ingress 和 Let&amp;rsquo;s Encrypt 实现外部服务的自动化 HTTPS。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>外部服务发现之 ingress(二)</title>
      <link>https://www.qikqiak.com/post/ingress-traefik2/</link>
      <pubDate>Fri, 31 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/ingress-traefik2/</guid>
      <description>&lt;p&gt;上节课给大家展示了&lt;code&gt;traefik&lt;/code&gt;的安装使用以及简单的&lt;code&gt;ingress&lt;/code&gt;的配置方法，这节课我们来学习一下 ingress tls 以及 path 路径在 ingress 对象中的使用方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>外部服务发现之 ingress(一)</title>
      <link>https://www.qikqiak.com/post/ingress-traefik1/</link>
      <pubDate>Wed, 15 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/ingress-traefik1/</guid>
      <description>&lt;p&gt;上节课我们学习了在&lt;code&gt;Kubernetes&lt;/code&gt;集群内部使用&lt;code&gt;kube-dns&lt;/code&gt;实现服务发现的功能，那么我们部署在&lt;code&gt;Kubernetes&lt;/code&gt;集群中的应用如何暴露给外部的用户使用呢？我们知道前面我们使用 NodePort 和 LoadBlancer 类型的 Service 可以实现把应用暴露给外部用户使用，除此之外，Kubernetes 还为我们提供了一个非常重要的资源对象可以用来暴露服务给外部用户，那就是 &lt;code&gt;ingress&lt;/code&gt;。对于小规模的应用我们使用&lt;code&gt;NodePort&lt;/code&gt;或许能够满足我们的需求，但是当你的应用越来越多的时候，你就会发现对于 NodePort 的管理就非常麻烦了，这个时候使用 ingress 就非常方便了，可以避免管理大量的 Port。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>