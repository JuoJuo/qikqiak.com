<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on 阳明的博客</title>
    <link>https://www.qikqiak.com/tags/golang/</link>
    <description>Recent content in Golang on 阳明的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 Aug 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.qikqiak.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用 GitHub Actions 自动化构建 Golang 应用</title>
      <link>https://www.qikqiak.com/post/use-github-actions-build-go-app/</link>
      <pubDate>Sat, 24 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/use-github-actions-build-go-app/</guid>
      <description>&lt;p&gt;GitHub 前一段时间推出了自家的自动化构建工具：&lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Actions&lt;/a&gt;，不过目前还没有开放注册，只能通过申请等待官方审核。我第一时间就提交了申请，现在已经审核通过了，所以第一时间体验了&lt;code&gt;GitHub Actions&lt;/code&gt;的功能，总体感受是 Travis CI 之类的工具应该现在在墙角&lt;code&gt;瑟瑟发抖&lt;/code&gt;吧😄？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GitHub Actions&lt;/code&gt;允许构建一个完整的 CI/CD Pipeline，与 GitHub 生态系统深度集成，而无需使用 Travis CI 或者 Circle CI 等第三方服务，对于开源项目都是可以免费使用的。如果你也想尽快使用的话，可以通过链接 &lt;a href=&#34;https://github.com/features/actions/signup&#34;&gt;https://github.com/features/actions/signup&lt;/a&gt; 去申请权限。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://bxdc-static.oss-cn-beijing.aliyuncs.com/images/github-actions.jpg&#34; alt=&#34;github actions&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go Modules 基本使用（视频）</title>
      <link>https://www.qikqiak.com/post/go-modules-usage/</link>
      <pubDate>Tue, 16 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/go-modules-usage/</guid>
      <description>&lt;p&gt;Go 语言中一直被人诟病的一个问题就是没有一个比较好用的依赖管理系统，GOPATH 的设计让开发者一直有很多怨言，在 Go 语言快速发展的过程中也出现了一些比较优秀的依赖管理工具，比如 govendor、dep、glide 等，有一些差不多成了半官方的工具了，但是这些工具都还是需要依赖于 GOPATH，为了彻底解决这个“祸水”，随着 Go1.11 的发布，Golang 官方给我们带来了依赖管理的全新特性&lt;code&gt;Go Modules&lt;/code&gt;，这是 Golang 全新的一套依赖管理系统。下面我们就来看下 Go Modules 是如何使用的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Helm Chart 模板开发技巧</title>
      <link>https://www.qikqiak.com/post/helm-chart-tips-and-tricks/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/helm-chart-tips-and-tricks/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.qikqiak.com/tags/helm/&#34;&gt;Helm&lt;/a&gt; Chart 在我们使用的时候非常方便的，但是对于开发人员来说 Helm Chart 模板就并不一定显得那么友好了，本文主要介绍了 Helm Chart 模板开发人员在构建生产级的 Chart 包时的一些技巧和窍门。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>并发模型</title>
      <link>https://www.qikqiak.com/post/concurrency-model-compare/</link>
      <pubDate>Mon, 17 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/concurrency-model-compare/</guid>
      <description>&lt;p&gt;&lt;code&gt;Golang&lt;/code&gt;的特色之一就是&lt;code&gt;goroutine&lt;/code&gt;，使得程序员进行并发编程更加方便，适合用来进行服务器编程。作为后端开发工程师，有必要了解并发编程面临的场景和常见的解决方案。一般情况下，是怎样做高并发的编程呢？有那些经典的模型呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>手摸手教你写 Kubernetes 的 golang 服务</title>
      <link>https://www.qikqiak.com/post/write-kubernets-golang-service-step-by-step/</link>
      <pubDate>Thu, 08 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/write-kubernets-golang-service-step-by-step/</guid>
      <description>&lt;p&gt;我们前面介绍了很多关于&lt;code&gt;kubernetes&lt;/code&gt;本身的操作，但是对于如何写一个完整的&lt;code&gt;kubernetes&lt;/code&gt;应用还没有介绍过。在这篇文章中我们将介绍如何一步一步的写一个&lt;code&gt;kubernetes&lt;/code&gt;的&lt;code&gt;golang&lt;/code&gt;服务。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>